package location_generator

import (
	"log"
	"os"
	"strings"
)

const locationTemplate = `
location {location} {

	proxy_set_header Host $host;
	proxy_set_header X-Remote-Address $remote_addr;
	proxy_set_header X-Request-Token $request_id;

	proxy_pass {proxy_pass};
}
`

var (
	methods = []string{
		"get",
		"post",
		"delete",
		"put",
	}
	protoPath = "./api"
)

func GenerateLocations(proxyPass, serviceName string) {
	dirs, err := os.ReadDir(protoPath)
	if err != nil {
		log.Fatalf("read proto files error: %v", err)
	}

	var f *os.File
	if f, err = os.Create("./location/" + serviceName + ".include"); err != nil {
		log.Fatalf("create file location error: %v", err)
	}
	defer func(f *os.File) {
		if err != nil {
			log.Fatalf("close file error: %v", err)
		}
	}(f)

	if _, err = f.Write([]byte("# Generated by " + serviceName + ". DO NOT EDIT.\n")); err != nil {
		log.Fatalf("write nginx location error: %v", err)
	}

	for _, dir := range dirs {
		if dir.IsDir() {
			readProtoFiles(dir, f, proxyPass)
		}
	}
}

func readProtoFiles(dir os.DirEntry, f *os.File, proxyPass string) {
	sourcesDir, err := os.ReadDir(protoPath + "/" + dir.Name())
	if err != nil {
		log.Fatalf("read sources dir error: %v", err)
	}

	for _, source := range sourcesDir {
		var dirs []os.DirEntry
		if dirs, err = os.ReadDir(protoPath + "/" + dir.Name() + "/" + source.Name()); err != nil {
			log.Printf("read dir content error %v", err)
			continue
		}

		for _, sourceDir := range dirs {
			if !sourceDir.IsDir() {
				var data []byte
				path := protoPath + "/" + dir.Name() + "/" + source.Name() + "/" + sourceDir.Name()
				if data, err = os.ReadFile(
					path,
				); err != nil {
					log.Printf("read file content error %v", err)
					continue
				}

				readFields(data, f, proxyPass)
			}
		}
	}
}

func readFields(data []byte, f *os.File, proxyPass string) {
	fields := strings.Fields(string(data))
	for i, field := range fields {
		for _, method := range methods {
			if strings.Contains(field, method) {
				location := strings.ReplaceAll(fields[i+1], "\"", "")
				location = strings.ReplaceAll(location, "\"", "")
				location = strings.ReplaceAll(location, ";", "")
				strings.ReplaceAll(fields[i+1], "\";", "")
				nginxLocation := strings.ReplaceAll(
					locationTemplate,
					"{location}",
					location,
				)
				nginxLocation = strings.ReplaceAll(
					nginxLocation,
					"{proxy_pass}",
					proxyPass,
				)
				nginxLocation = strings.ReplaceAll(
					nginxLocation,
					"{method}",
					strings.ToUpper(method),
				)

				if _, err := f.Write([]byte(nginxLocation)); err != nil {
					log.Printf("write nginx location error: %v", err)
					continue
				}
			}
		}
	}
}
